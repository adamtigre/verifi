{"version":3,"sources":["assets/logo.png","components/minter/Cover.js","components/ui/Notifications.js","hooks/useVerifiContract.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","assets/gold_star.png","assets/silver_star.png","assets/bronze_star.png","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","NavBar.js","App.js","hooks/useBalance.js","index.js"],"names":["Cover","connect","className","src","logo","onClick","catch","e","console","log","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","useVerifiContract","abi","contractAddress","useContractKit","getConnectedKit","address","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","useEffect","useContract","VERIFI_DATA","VERIFI_ADDRESS","Verifi","formattedName","name","trim_name","trim","includes","replaceAll","makeFileObjects","file","blob","Blob","JSON","stringify","type","File","client","Web3Storage","token","process","storeFiles","files","put","cid","uploadToIpfs","file_name","image_name","image_cid","image_url","mintNft","nftContract","performActions","description","ipfsImage","defaultAccount","data","image","owner","file_cid","URI","methods","mint","send","from","transaction","fetchCerts","getCerts","call","d","Promise","all","map","_cert","tokenURI","certId","fetchNftMeta","tokenData","validators","index","certs","fetchBoardMembers","members","getBoardMembers","addBoardMember","memberAddress","error","verifyCert","verifyCertificate","ipfsUrl","fetch","fetch_meta","json","meta","AddNfts","save","setName","setIpfsImage","setDescription","show","setShow","handleClose","class","Modal","onHide","centered","Header","Title","style","color","width","textAlign","Body","Form","Control","placeholder","height","fontSize","onChange","target","value","as","image_file","imageUrl","alert","Footer","disabled","Expand","props","size","Button","Nft","nft","isBoardMember","verify","React","modalShow","setModalShow","Col","length","goldImg","silverImg","bronzeImg","alt","navigator","clipboard","writeText","toast","Loader","Spinner","animation","role","NftList","vContract","nfts","setNfts","boardMembers","setBoardMembers","loading","setLoading","boardMember","setBoardMember","fetchNFTs","allNfts","addNft","addNew","member","Add","_nft","filter","truncateAddress","slice","formatBigNumber","num","shiftedBy","toFixed","Identicon","rest","ref","useRef","current","innerHTML","appendChild","Jazzicon","parseInt","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Menu","Item","href","Stack","direction","gap","Divider","NavBar","balance","Nav","CELO","App","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","updateBalance","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.ac48f641.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.68599634.png\";","import React from \"react\";\nimport \"./Cover.css\";\nimport logo from \"../../assets/logo.png\";\n\nconst Cover = ({ connect }) => {\n  return (\n    <div className=\"cover_page d-flex align-items-center\">\n      <img className=\"cover_image_lg\" src={logo} />\n      <div className=\"cover_header d-flex align-items-center\">\n        <div className=\"cover_text\">\n          <h1> <div>Verifi</div> <br/> Mint and Verify your certificates on the blockcahin</h1>\n          <p>\n            Verifi is a blockchain platform you can mint your certificates as\n            NFTs, get it verified by one, two, or three trusted parties and\n            share it with prospective employers\n          </p>\n          <button onClick={() => connect().catch((e) => console.log(e))}>\n            Connect\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import { useContract } from \"./useContract\";\nimport VERIFI_DATA from \"../contracts/Verifi-data.json\";\nimport VERIFI_ADDRESS from \"../contracts/Verifi-address.json\";\n\n// export interface for NFT contract\nexport const useVerifiContract = () =>\n  useContract(VERIFI_DATA.abi, VERIFI_ADDRESS.Verifi);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    try {      \n      // get a contract interface to interact with\n      setContract(new kit.web3.eth.Contract(abi, contractAddress));\n    } catch (e) {\n      console.log(\"error from useContract: \" + e);\n    }\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);  \n\n  return contract;\n};\n","import { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\n\nconst getAccessToken = () => {\n  const token = process.env.REACT_APP_API_TOKEN;\n  return token;\n};\nconst makeStorageClient = () => {\n  return new Web3Storage({ token: getAccessToken() });\n};\nconst formattedName = (name) => {\n  let file_name;\n  const trim_name = name.trim();\n  if (trim_name.includes(\" \")) {\n    file_name = trim_name.replaceAll(\" \", \"%20\");\n    return file_name;\n  } else return trim_name;\n};\nconst makeFileObjects = (file) => {\n  const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n  const files = [new File([blob], `${file.name}.json`)];\n  return files;\n};\nconst client = makeStorageClient();\nconst storeFiles = async (files) => {\n  const cid = await client.put(files);\n  return cid;\n};\n\n// function to upload an image to Web3.storage\nexport const uploadToIpfs = async (file) => {\n  if (!file) return;\n  try {\n    const file_name = file[0].name;\n    const image_name = formattedName(file_name);\n    const image_cid = await storeFiles(file);\n    const image_url = `https://${image_cid}.ipfs.w3s.link/${image_name}`;\n    return image_url;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// mint an NFT\nexport const mintNft = async (\n  nftContract,\n  performActions,\n  { name, description, ipfsImage }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // trim any extra whitespaces from the name and\n    // replace the whitespace between the name with %20\n    const file_name = formattedName(name);\n\n    // convert NFT metadata to JSON format\n    const data = {\n      name,\n      image: ipfsImage,\n      description,\n      owner: defaultAccount,\n    };\n\n    try {\n      // save NFT metadata to IPFS\n      const files = makeFileObjects(data);\n      const file_cid = await storeFiles(files);\n      const URI = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;\n      console.log(\"URI: \" + URI);\n\n      // upload the NFT, mint the NFT and save the IPFS url to the blockchain\n      let transaction = await nftContract.methods\n        .mint(URI)\n        .send({ from: defaultAccount });\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\n// fetch all NFTs\nexport const fetchCerts = async (nftContract) => {\n  try {\n    const d = await nftContract.methods.getCerts().call();\n    const certs = await Promise.all(\n      d.map(async (_cert) => {\n        const tokenURI = await nftContract.methods\n          .tokenURI(_cert.certId)\n          .call();\n        const tokenData = await fetchNftMeta(tokenURI);\n        return {\n          validators: _cert.validators,\n          index: _cert.certId,\n          owner: _cert.owner,\n          name: tokenData.name,\n          image: tokenData.image,\n          description: tokenData.description,\n        };\n      })\n    );\n    return certs;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Fetch all board members\nexport const fetchBoardMembers = async (contract) => {\n  try {\n    const members = contract.methods.getBoardMembers().call();\n    return members;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// Add board members\nexport const addBoardMember = async (\n  contract,\n  performActions,\n  memberAddress\n) => {\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n    try {\n      contract.methods\n        .addBoardMember(memberAddress)\n        .send({ from: defaultAccount });\n    } catch (error) {\n      console.log(\"Error adding board member: \", error);\n    }\n  });\n};\n\n// Verify certificate\nexport const verifyCert = async (contract, performActions, certId) => {\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n    try {\n      contract.methods.verifyCertificate(certId).send({ from: defaultAccount });\n    } catch (error) {\n      console.log(\"Error verifying certificate: \", error);\n    }\n  });\n};\n\n// Get NFT metadata from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const fetch_meta = await fetch(ipfsUrl);\n    const meta = await fetch_meta.json();\n\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst AddNfts = ({ save }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  // check if all form data has been filled\n  const isFormFilled = () => name && ipfsImage && description;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleShow} className=\"add-btn mb-4\">\n        Add <i class=\"bi bi-plus\"></i>\n      </button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title\n            style={{ color: \"#531c1c\", width: \"100%\", textAlign: \"center\" }}\n          >\n            Add new certificate\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Name\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setName(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"Description\"\n              className={\"mb-3\"}\n              style={{ height: \"80px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setDescription(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              type=\"file\"\n              placeholder=\"NFT Image\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                console.log(e.target.files);\n                const image_file = e.target.files;\n                console.log(image_file);\n                const imageUrl = await uploadToIpfs(image_file);\n                if (!imageUrl) {\n                  alert(\"Failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n            />\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer className=\"modal_footer\">\n          <button className=\"close_btn\" onClick={handleClose}>\n            Close\n          </button>\n          <button\n            className=\"create_btn\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                description,\n                ipfsImage,\n              });\n              handleClose();\n            }}\n          >\n            Mint\n          </button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  // address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","export default __webpack_public_path__ + \"static/media/gold_star.6293ae81.png\";","export default __webpack_public_path__ + \"static/media/silver_star.23fe0d56.png\";","export default __webpack_public_path__ + \"static/media/bronze_star.95e97c01.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col } from \"react-bootstrap\";\nimport goldImg from \"../../../assets/gold_star.png\";\nimport silverImg from \"../../../assets/silver_star.png\";\nimport bronzeImg from \"../../../assets/bronze_star.png\";\nimport { toast } from \"react-toastify\";\nimport { NotificationSuccess } from \"../../ui/Notifications\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst Expand = (props) => {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <img src={props.image} />\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\n// NFT Cards Functionality\nconst Nft = ({ nft, isBoardMember, verify }) => {\n  const [modalShow, setModalShow] = React.useState(false);\n\n  const { image, description, name, index, validators, owner } = nft;\n\n  return (\n    <>\n      <Col key={index} className=\"mb-5\">\n        <div className=\"cert_container d-flex flex-wrap\">\n          <img\n            className=\"cert_reps_img\"\n            src={\n              validators?.length >= 2\n                ? goldImg\n                : validators?.length == 1\n                ? silverImg\n                : validators?.length == 0\n                ? bronzeImg\n                : \"\"\n            }\n          />\n          <img className=\"cert_image\" src={image} alt={name} />\n          <div className=\"cert_details\">\n            <h2 className=\"cert_name d-flex justify-content-around\">{name}</h2>\n            <p className=\"cert_desc\">{description}</p>\n            <div className=\"cert_reps\">\n              {validators?.length >= 2\n                ? \"Gold\"\n                : validators?.length == 1\n                ? \"Silver\"\n                : validators?.length == 0\n                ? \"Bronze\"\n                : \"\"}\n            </div>\n            <Expand\n              show={modalShow}\n              onHide={() => setModalShow(false)}\n              image={image}\n            />\n            <div className=\"cert_act\">\n              <button className=\"\" onClick={() => setModalShow(true)}>\n                Expand\n              </button>\n              {isBoardMember ? (\n                <button onClick={() => verify(index)}>Verify</button>\n              ) : (\n                <button\n                  className=\"\"\n                  onClick={() => {\n                    navigator.clipboard.writeText(image);\n                    toast(\n                      <NotificationSuccess text=\"Successfully copied link to clipboard\" />\n                    );\n                  }}\n                >\n                  Copy Link\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </Col>\n    </>\n  );\n};\n\nNft.propTypes = {\n  // props passed into this component\n  image: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Nft;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  fetchCerts,\n  mintNft,\n  fetchBoardMembers,\n  addBoardMember,\n  verifyCert,\n} from \"../../../utils/minter\";\n\nconst NftList = ({ vContract }) => {\n  const { performActions, address, kit } = useContractKit();\n  const { defaultAccount } = kit;\n  const [nfts, setNfts] = useState([]);\n  const [boardMembers, setBoardMembers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [boardMember, setBoardMember] = useState();\n  const [show, setShow] = useState(false);\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  const fetchNFTs = useCallback(async () => {\n    try {\n      setLoading(true);\n      // fetch all nfts from the smart contract\n      const allNfts = await fetchCerts(vContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [vContract]);\n\n  const getBoardMembers = useCallback(async () => {\n    try {\n      setLoading(true);\n      // fetch all nfts from the smart contract\n      const members = await fetchBoardMembers(vContract);\n      if (!members) return;\n      setBoardMembers(members);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [vContract]);\n\n  // Add new NFT\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await mintNft(vContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      fetchNFTs();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addNew = async (member) => {\n    try {\n      setLoading(true);\n      await addBoardMember(vContract, performActions, member);\n      toast(<NotificationSuccess text=\"Adding new board members ....\" />);\n      fetchNFTs();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to add new board member\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const verify = async (certId) => {\n    try {\n      setLoading(true);\n      await verifyCert(vContract, performActions, certId);\n      toast(<NotificationSuccess text=\"Verifying certificate ....\" />);\n      fetchNFTs();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to verify certificate\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (address && vContract) {\n        fetchNFTs();\n        getBoardMembers();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [vContract, address, fetchNFTs]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"marketplace\">\n              <h1\n                className=\"fs-10 fw-bold text-center mb-5\"\n                style={{ color: \"#531c1c\" }}\n              >\n                My Certificates\n              </h1>\n              {boardMembers.includes(defaultAccount) ? (\n                <>\n                  <button\n                    type=\"button\"\n                    onClick={handleShow}\n                    className=\"add-btn mb-4\"\n                  >\n                    Add board member <i class=\"bi bi-plus\"></i>\n                  </button>\n                  <Modal show={show} onHide={handleClose} centered>\n                    <Modal.Header>\n                      <Modal.Title\n                        style={{\n                          color: \"#531c1c\",\n                          width: \"100%\",\n                          textAlign: \"center\",\n                        }}\n                      >\n                        Add new board member\n                      </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                      <Form>\n                        <Form.Control\n                          type=\"text\"\n                          placeholder=\"New member wallet address\"\n                          className={\"mb-3\"}\n                          style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n                          onChange={(e) => {\n                            setBoardMember(e.target.value);\n                          }}\n                        />\n                      </Form>\n                    </Modal.Body>\n\n                    <Modal.Footer className=\"modal_footer\">\n                      <button className=\"close_btn\" onClick={handleClose}>\n                        Close\n                      </button>\n                      <button\n                        className=\"create_btn\"\n                        onClick={() => {\n                          addNew(boardMember);\n                          handleClose();\n                        }}\n                      >\n                        Add\n                      </button>\n                    </Modal.Footer>\n                  </Modal>\n                </>\n              ) : (\n                <AddNfts save={addNft} address={address} />\n              )}\n            </div>\n            <div className=\"all_nft\">\n              {/* display all NFTs */}\n              {boardMembers.includes(defaultAccount) ? (\n                <>\n                  {nfts.map((_nft) => (\n                    <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                      isBoardMember={true}\n                      verify={verify}\n                    />\n                  ))}\n                </>\n              ) : (\n                <>\n                  {nfts\n                    .filter((nft) => nft.owner == defaultAccount)\n                    .map((_nft) => (\n                      <Nft\n                        key={_nft.index}\n                        nft={{\n                          ..._nft,\n                        }}\n                        isBoardMember={false}\n                      />\n                    ))}\n                </>\n              )}\n            </div>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  vContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  vContract: null,\n};\n\nexport default NftList;\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 3, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"../../utils\";\nimport Identicon from \"../ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        {/* Wallet Dropdown functionality */}\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\r\nimport Wallet from \"./components/wallet\";\r\nimport logo from \"./assets/logo.png\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = ({ address, balance, destroy, connect }) => {\r\n  return (\r\n    <Nav className=\"nav justify-content-between px-5 py-3\">\r\n      <Nav.Item>\r\n        <img className=\"logo_img\" src={logo} alt=\"Logo\" />\r\n        <span className=\"logo_name\">Verifi</span>\r\n      </Nav.Item>\r\n      {address ? (\r\n        <Nav.Item>\r\n          {/*display user wallet*/}\r\n          <Wallet\r\n            address={address}\r\n            amount={balance.CELO}\r\n            symbol=\"CELO\"\r\n            destroy={destroy}\r\n          />\r\n        </Nav.Item>\r\n      ) : (\r\n        <Nav.Item>\r\n          <button onClick={() => connect().catch((e) => console.log(e))}>\r\n            Connect\r\n          </button>\r\n        </Nav.Item>\r\n      )}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\nimport Cover from \"./components/minter/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\n\nimport { useBalance, useVerifiContract } from \"./hooks\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport NavBar from \"./NavBar\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n\n  // initialize the NFT mint contract\n  const vContract = useVerifiContract();\n\n  return (\n    <>\n      <Notification />\n      {address && (\n        <NavBar\n          address={address}\n          balance={balance}\n          destroy={destroy}\n          connect={connect}\n        />\n      )}\n\n      {address ? (\n        <Container fluid=\"md\">\n          <main>\n            <Nfts updateBalance={getBalance} vContract={vContract} />\n          </main>\n        </Container>\n      ) : (\n        <Cover connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address || balance) getBalance();\n  }, [address, getBalance, balance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Verifi\",\n        description: \"A platform to get your certificates verified on the blockchain\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}